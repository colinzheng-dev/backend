// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import db "github.com/veganbase/backend/services/category-service/db"
import mock "github.com/stretchr/testify/mock"
import model "github.com/veganbase/backend/services/category-service/model"
import types "github.com/jmoiron/sqlx/types"

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// AddCategoryEntry provides a mock function with given fields: category, label, value, creator
func (_m *DB) AddCategoryEntry(category string, label string, value types.JSONText, creator string) error {
	ret := _m.Called(category, label, value, creator)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, types.JSONText, string) error); ok {
		r0 = rf(category, label, value, creator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Categories provides a mock function with given fields:
func (_m *DB) Categories() (map[string]*model.Category, error) {
	ret := _m.Called()

	var r0 map[string]*model.Category
	if rf, ok := ret.Get(0).(func() map[string]*model.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryByName provides a mock function with given fields: name
func (_m *DB) CategoryByName(name string) (*model.Category, error) {
	ret := _m.Called(name)

	var r0 *model.Category
	if rf, ok := ret.Get(0).(func(string) *model.Category); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryEntries provides a mock function with given fields: category, fixed
func (_m *DB) CategoryEntries(category string, fixed *bool) (map[string]interface{}, error) {
	ret := _m.Called(category, fixed)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, *bool) map[string]interface{}); ok {
		r0 = rf(category, fixed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *bool) error); ok {
		r1 = rf(category, fixed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntryInfo provides a mock function with given fields: category, label
func (_m *DB) EntryInfo(category string, label string) (*db.EntryInfo, error) {
	ret := _m.Called(category, label)

	var r0 *db.EntryInfo
	if rf, ok := ret.Get(0).(func(string, string) *db.EntryInfo); ok {
		r0 = rf(category, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.EntryInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(category, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FixCategoryEntry provides a mock function with given fields: category, label, fixed
func (_m *DB) FixCategoryEntry(category string, label string, fixed bool) error {
	ret := _m.Called(category, label, fixed)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(category, label, fixed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveEvent provides a mock function with given fields: label, eventData, inTx
func (_m *DB) SaveEvent(label string, eventData interface{}, inTx func() error) error {
	ret := _m.Called(label, eventData, inTx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, func() error) error); ok {
		r0 = rf(label, eventData, inTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCategoryEntry provides a mock function with given fields: category, label, value
func (_m *DB) UpdateCategoryEntry(category string, label string, value types.JSONText) error {
	ret := _m.Called(category, label, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, types.JSONText) error); ok {
		r0 = rf(category, label, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
