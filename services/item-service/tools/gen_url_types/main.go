// Generate all item-service model code that relies on URL type list:
//
//  - URLType enumeration constants.
//  - UnmarshalJSON, String and MarshalJSON methods.

package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"strings"
	"text/template"

	"github.com/rs/zerolog/log"
)

func main() {
	// Read url_types.txt file from current directory.
	f, err := os.Open("url_types.txt")
	defer f.Close()
	if err != nil {
		log.Fatal().Err(err).Msg("couldn't open url_types.txt")
	}
	scanner := bufio.NewScanner(f)
	urlTypes := make([]string, 0)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" {
			urlTypes = append(urlTypes, line)
		}
	}
	if err = scanner.Err(); err != nil {
		log.Fatal().Err(err).Msg("couldn't read url_types.txt")
	}

	// Open output file.
	outf, err := os.Create("url_types_generated.go")
	if err != nil {
		log.Fatal().Err(err).Msg("couldn't create url_types_generated.go")
	}
	defer outf.Close()
	fmt.Fprintln(outf, "// Code generated by gen_url_types. DO NOT EDIT.")

	templates := []struct {
		name  string
		templ string
	}{{name: "enum", templ: enumTemplate},
		{name: "json", templ: unmarshalJSONTemplate},
		{name: "string", templ: stringTemplate}}
	for _, t := range templates {
		runTemplate(outf, t.name, t.templ, urlTypes)
	}
}

func runTemplate(f io.Writer, name string, templ string, ts []string) {
	funcMap := template.FuncMap{
		"lower": strings.ToLower,
	}
	t := template.Must(template.New(name).Funcs(funcMap).
		Parse(strings.ReplaceAll(templ, "#", "`")))
	err := t.Execute(f, ts)
	if err != nil {
		log.Fatal().Err(err).Msg("failed during template generation")
	}
}

const enumTemplate string = `
package types

import (
	"encoding/json"
	"strings"

	"github.com/pkg/errors"
)

// URLType is a type of web link, e.g. "website", "facebook",
// "instagram", etc.
type URLType string

// Constants for all URL types.
const (
	UnknownURL URLType = "<unknown URL type>"{{range .}}
	{{.}}URL = "{{lower .}}"{{end}}
)
`

const unmarshalJSONTemplate string = `
// UnmarshalJSON unmarshals a URL type from a JSON string.
func (it *URLType) UnmarshalJSON(d []byte) error {
	var s string
	if err := json.Unmarshal(d, &s); err != nil {
		return errors.Wrap(err, "can't unmarshal item type")
	}
	return it.FromString(s)
}

// FromString converts a string to a URL type.
func (it *URLType) FromString(s string) error {
	switch strings.ToLower(s) {
	default:
		return errors.New("unknown URL type '" + s + "'")
{{- range .}}
	case "{{lower .}}":
		*it = {{.}}URL
{{- end}}
	}
	return nil
}
`

const stringTemplate string = `
// String converts an URL type from its internal representation to a
// string.
func (it URLType) String() string {
	switch it {
	default:
		return "<unknown URL type>"
{{- range .}}
	case {{.}}URL:
		return "{{lower .}}"
{{- end}}
	}
}

// MarshalJSON converts an internal URL type to JSON.
func (it URLType) MarshalJSON() ([]byte, error) {
	s := it.String()
	if s == "<unknown URL type>" {
		return nil, errors.New("unknown URL type")
	}
	return json.Marshal(s)
}
`
