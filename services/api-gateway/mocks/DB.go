// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// CheckLoginToken provides a mock function with given fields: token
func (_m *DB) CheckLoginToken(token string) (string, string, string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(token)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CreateLoginToken provides a mock function with given fields: email, site, language
func (_m *DB) CreateLoginToken(email string, site string, language string) (string, error) {
	ret := _m.Called(email, site, language)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(email, site, language)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, site, language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: userID, userEmail, userIsAdmin
func (_m *DB) CreateSession(userID string, userEmail string, userIsAdmin bool) (string, error) {
	ret := _m.Called(userID, userEmail, userIsAdmin)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, bool) string); ok {
		r0 = rf(userID, userEmail, userIsAdmin)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(userID, userEmail, userIsAdmin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSession provides a mock function with given fields: token
func (_m *DB) DeleteSession(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserSessions provides a mock function with given fields: userID
func (_m *DB) DeleteUserSessions(userID string) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LookupSession provides a mock function with given fields: token
func (_m *DB) LookupSession(token string) (string, string, bool, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string) bool); ok {
		r2 = rf(token)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(token)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SaveEvent provides a mock function with given fields: label, eventData, inTx
func (_m *DB) SaveEvent(label string, eventData interface{}, inTx func() error) error {
	ret := _m.Called(label, eventData, inTx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, func() error) error); ok {
		r0 = rf(label, eventData, inTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSessions provides a mock function with given fields: userID, userEmail, userIsAdmin
func (_m *DB) UpdateSessions(userID string, userEmail string, userIsAdmin bool) error {
	ret := _m.Called(userID, userEmail, userIsAdmin)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(userID, userEmail, userIsAdmin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
