// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	messages "github.com/veganbase/backend/services/user-service/messages"

	model "github.com/veganbase/backend/services/user-service/model"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// AddressById provides a mock function with given fields: id
func (_m *DB) AddressById(id string) (*model.Address, error) {
	ret := _m.Called(id)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(string) *model.Address); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressesByUserId provides a mock function with given fields: id
func (_m *DB) AddressesByUserId(id string) (*[]model.Address, error) {
	ret := _m.Called(id)

	var r0 *[]model.Address
	if rf, ok := ret.Get(0).(func(string) *[]model.Address); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAddress provides a mock function with given fields: addr
func (_m *DB) CreateAddress(addr *model.Address) error {
	ret := _m.Called(addr)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Address) error); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCustomer provides a mock function with given fields: cus
func (_m *DB) CreateCustomer(cus *model.Customer) error {
	ret := _m.Called(cus)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Customer) error); ok {
		r0 = rf(cus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDeliveryFees provides a mock function with given fields: delFee
func (_m *DB) CreateDeliveryFees(delFee *model.DeliveryFees) error {
	ret := _m.Called(delFee)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.DeliveryFees) error); ok {
		r0 = rf(delFee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrg provides a mock function with given fields: org
func (_m *DB) CreateOrg(org *model.Organisation) error {
	ret := _m.Called(org)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Organisation) error); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePaymentMethod provides a mock function with given fields: pmt
func (_m *DB) CreatePaymentMethod(pmt *model.PaymentMethod) error {
	ret := _m.Called(pmt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PaymentMethod) error); ok {
		r0 = rf(pmt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePayoutAccount provides a mock function with given fields: acc
func (_m *DB) CreatePayoutAccount(acc *model.PayoutAccount) error {
	ret := _m.Called(acc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PayoutAccount) error); ok {
		r0 = rf(acc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerByUserId provides a mock function with given fields: userId
func (_m *DB) CustomerByUserId(userId string) (*model.Customer, error) {
	ret := _m.Called(userId)

	var r0 *model.Customer
	if rf, ok := ret.Get(0).(func(string) *model.Customer); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefaultAddressByUserId provides a mock function with given fields: id
func (_m *DB) DefaultAddressByUserId(id string) (*model.Address, error) {
	ret := _m.Called(id)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(string) *model.Address); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefaultPaymentMethodByUserId provides a mock function with given fields: id
func (_m *DB) DefaultPaymentMethodByUserId(id string) (*model.PaymentMethod, error) {
	ret := _m.Called(id)

	var r0 *model.PaymentMethod
	if rf, ok := ret.Get(0).(func(string) *model.PaymentMethod); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAPIKey provides a mock function with given fields: id
func (_m *DB) DeleteAPIKey(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAddress provides a mock function with given fields: id
func (_m *DB) DeleteAddress(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCustomer provides a mock function with given fields: userId
func (_m *DB) DeleteCustomer(userId string) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeliveryFees provides a mock function with given fields: id
func (_m *DB) DeleteDeliveryFees(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrg provides a mock function with given fields: orgID
func (_m *DB) DeleteOrg(orgID string) error {
	ret := _m.Called(orgID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(orgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaymentMethod provides a mock function with given fields: id
func (_m *DB) DeletePaymentMethod(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePayoutAccount provides a mock function with given fields: id
func (_m *DB) DeletePayoutAccount(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSSOSecret provides a mock function with given fields: id
func (_m *DB) DeleteSSOSecret(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *DB) DeleteUser(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeliveryFeesById provides a mock function with given fields: id
func (_m *DB) DeliveryFeesById(id string) (*model.DeliveryFees, error) {
	ret := _m.Called(id)

	var r0 *model.DeliveryFees
	if rf, ok := ret.Get(0).(func(string) *model.DeliveryFees); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeliveryFees)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeliveryFeesByOwner provides a mock function with given fields: id
func (_m *DB) DeliveryFeesByOwner(id string) (*model.DeliveryFees, error) {
	ret := _m.Called(id)

	var r0 *model.DeliveryFees
	if rf, ok := ret.Get(0).(func(string) *model.DeliveryFees); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeliveryFees)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryFees provides a mock function with given fields: ids
func (_m *DB) GetDeliveryFees(ids []string) (map[string]model.DeliveryFees, error) {
	ret := _m.Called(ids)

	var r0 map[string]model.DeliveryFees
	if rf, ok := ret.Get(0).(func([]string) map[string]model.DeliveryFees); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]model.DeliveryFees)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSSOSecretByOrgIDOrSlug provides a mock function with given fields: id
func (_m *DB) GetSSOSecretByOrgIDOrSlug(id string) (*messages.SSOSecret, error) {
	ret := _m.Called(id)

	var r0 *messages.SSOSecret
	if rf, ok := ret.Get(0).(func(string) *messages.SSOSecret); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.SSOSecret)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Info provides a mock function with given fields: ids
func (_m *DB) Info(ids []string) (map[string]model.Info, error) {
	ret := _m.Called(ids)

	var r0 map[string]model.Info
	if rf, ok := ret.Get(0).(func([]string) map[string]model.Info); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]model.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: email, avatarGen
func (_m *DB) LoginUser(email string, avatarGen func() string) (*model.User, bool, error) {
	ret := _m.Called(email, avatarGen)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, func() string) *model.User); ok {
		r0 = rf(email, avatarGen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, func() string) bool); ok {
		r1 = rf(email, avatarGen)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, func() string) error); ok {
		r2 = rf(email, avatarGen)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NotificationInfoByOrgId provides a mock function with given fields: orgId
func (_m *DB) NotificationInfoByOrgId(orgId string) (*model.EmailNotificationInfo, error) {
	ret := _m.Called(orgId)

	var r0 *model.EmailNotificationInfo
	if rf, ok := ret.Get(0).(func(string) *model.EmailNotificationInfo); ok {
		r0 = rf(orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EmailNotificationInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationInfoByUserId provides a mock function with given fields: userId
func (_m *DB) NotificationInfoByUserId(userId string) (*model.EmailNotificationInfo, error) {
	ret := _m.Called(userId)

	var r0 *model.EmailNotificationInfo
	if rf, ok := ret.Get(0).(func(string) *model.EmailNotificationInfo); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EmailNotificationInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgAddUser provides a mock function with given fields: orgID, userID, isOrgAdmin
func (_m *DB) OrgAddUser(orgID string, userID string, isOrgAdmin bool) error {
	ret := _m.Called(orgID, userID, isOrgAdmin)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(orgID, userID, isOrgAdmin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrgByIDorSlug provides a mock function with given fields: idOrSlug
func (_m *DB) OrgByIDorSlug(idOrSlug string) (*model.Organisation, error) {
	ret := _m.Called(idOrSlug)

	var r0 *model.Organisation
	if rf, ok := ret.Get(0).(func(string) *model.Organisation); ok {
		r0 = rf(idOrSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Organisation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idOrSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgDeleteUser provides a mock function with given fields: orgID, userID
func (_m *DB) OrgDeleteUser(orgID string, userID string) error {
	ret := _m.Called(orgID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(orgID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrgPatchUser provides a mock function with given fields: orgID, userID, isOrgAdmin
func (_m *DB) OrgPatchUser(orgID string, userID string, isOrgAdmin bool) error {
	ret := _m.Called(orgID, userID, isOrgAdmin)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(orgID, userID, isOrgAdmin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrgUsers provides a mock function with given fields: id
func (_m *DB) OrgUsers(id string) ([]*model.OrgUser, error) {
	ret := _m.Called(id)

	var r0 []*model.OrgUser
	if rf, ok := ret.Get(0).(func(string) []*model.OrgUser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrgUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Orgs provides a mock function with given fields: search, page, perPage
func (_m *DB) Orgs(search string, page uint, perPage uint) ([]*model.Organisation, error) {
	ret := _m.Called(search, page, perPage)

	var r0 []*model.Organisation
	if rf, ok := ret.Get(0).(func(string, uint, uint) []*model.Organisation); ok {
		r0 = rf(search, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Organisation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint, uint) error); ok {
		r1 = rf(search, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentMethodById provides a mock function with given fields: id
func (_m *DB) PaymentMethodById(id string) (*model.PaymentMethod, error) {
	ret := _m.Called(id)

	var r0 *model.PaymentMethod
	if rf, ok := ret.Get(0).(func(string) *model.PaymentMethod); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentMethodsByUserId provides a mock function with given fields: id
func (_m *DB) PaymentMethodsByUserId(id string) (*[]model.PaymentMethod, error) {
	ret := _m.Called(id)

	var r0 *[]model.PaymentMethod
	if rf, ok := ret.Get(0).(func(string) *[]model.PaymentMethod); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayoutAccountById provides a mock function with given fields: id
func (_m *DB) PayoutAccountById(id string) (*model.PayoutAccount, error) {
	ret := _m.Called(id)

	var r0 *model.PayoutAccount
	if rf, ok := ret.Get(0).(func(string) *model.PayoutAccount); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PayoutAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayoutAccountByOwner provides a mock function with given fields: ownerId
func (_m *DB) PayoutAccountByOwner(ownerId string) (*model.PayoutAccount, error) {
	ret := _m.Called(ownerId)

	var r0 *model.PayoutAccount
	if rf, ok := ret.Get(0).(func(string) *model.PayoutAccount); ok {
		r0 = rf(ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PayoutAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateSSOSecret provides a mock function with given fields: secret, orgID
func (_m *DB) RotateSSOSecret(secret string, orgID string) error {
	ret := _m.Called(secret, orgID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(secret, orgID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveEvent provides a mock function with given fields: topic, eventData, inTx
func (_m *DB) SaveEvent(topic string, eventData interface{}, inTx func() error) error {
	ret := _m.Called(topic, eventData, inTx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, func() error) error); ok {
		r0 = rf(topic, eventData, inTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveHashedAPIKey provides a mock function with given fields: key, secret, userID
func (_m *DB) SaveHashedAPIKey(key string, secret string, userID string) error {
	ret := _m.Called(key, secret, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(key, secret, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAddress provides a mock function with given fields: addr
func (_m *DB) UpdateAddress(addr *model.Address) error {
	ret := _m.Called(addr)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Address) error); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeliveryFees provides a mock function with given fields: delFee
func (_m *DB) UpdateDeliveryFees(delFee *model.DeliveryFees) error {
	ret := _m.Called(delFee)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.DeliveryFees) error); ok {
		r0 = rf(delFee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrg provides a mock function with given fields: org
func (_m *DB) UpdateOrg(org *model.Organisation) error {
	ret := _m.Called(org)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Organisation) error); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePaymentMethod provides a mock function with given fields: pmt
func (_m *DB) UpdatePaymentMethod(pmt *model.PaymentMethod) error {
	ret := _m.Called(pmt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PaymentMethod) error); ok {
		r0 = rf(pmt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePayoutAccount provides a mock function with given fields: acc
func (_m *DB) UpdatePayoutAccount(acc *model.PayoutAccount) error {
	ret := _m.Called(acc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PayoutAccount) error); ok {
		r0 = rf(acc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *DB) UpdateUser(user *model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserByAPIKey provides a mock function with given fields: apiKey
func (_m *DB) UserByAPIKey(apiKey string) (*model.User, error) {
	ret := _m.Called(apiKey)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserByID provides a mock function with given fields: id
func (_m *DB) UserByID(id string) (*model.User, error) {
	ret := _m.Called(id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserOrgs provides a mock function with given fields: userID
func (_m *DB) UserOrgs(userID string) ([]*model.OrgWithUserInfo, error) {
	ret := _m.Called(userID)

	var r0 []*model.OrgWithUserInfo
	if rf, ok := ret.Get(0).(func(string) []*model.OrgWithUserInfo); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrgWithUserInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: search, page, perPage
func (_m *DB) Users(search string, page uint, perPage uint) ([]model.User, error) {
	ret := _m.Called(search, page, perPage)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(string, uint, uint) []model.User); ok {
		r0 = rf(search, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint, uint) error); ok {
		r1 = rf(search, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersByIDs provides a mock function with given fields: ids
func (_m *DB) UsersByIDs(ids []string) (map[string]*model.User, error) {
	ret := _m.Called(ids)

	var r0 map[string]*model.User
	if rf, ok := ret.Get(0).(func([]string) map[string]*model.User); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
