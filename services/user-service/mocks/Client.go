// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/veganbase/backend/services/user-service/client"

	model "github.com/veganbase/backend/services/user-service/model"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetAddress provides a mock function with given fields: userId, addressId
func (_m *Client) GetAddress(userId string, addressId string) (*model.Address, error) {
	ret := _m.Called(userId, addressId)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(string, string) *model.Address); ok {
		r0 = rf(userId, addressId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, addressId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomer provides a mock function with given fields: userID
func (_m *Client) GetCustomer(userID string) (*model.Customer, error) {
	ret := _m.Called(userID)

	var r0 *model.Customer
	if rf, ok := ret.Get(0).(func(string) *model.Customer); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultAddress provides a mock function with given fields: userId
func (_m *Client) GetDefaultAddress(userId string) (*model.Address, error) {
	ret := _m.Called(userId)

	var r0 *model.Address
	if rf, ok := ret.Get(0).(func(string) *model.Address); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultPaymentMethod provides a mock function with given fields: userID
func (_m *Client) GetDefaultPaymentMethod(userID string) (*model.PaymentMethod, error) {
	ret := _m.Called(userID)

	var r0 *model.PaymentMethod
	if rf, ok := ret.Get(0).(func(string) *model.PaymentMethod); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryFees provides a mock function with given fields: ids
func (_m *Client) GetDeliveryFees(ids []string) (*map[string]model.DeliveryFees, error) {
	ret := _m.Called(ids)

	var r0 *map[string]model.DeliveryFees
	if rf, ok := ret.Get(0).(func([]string) *map[string]model.DeliveryFees); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]model.DeliveryFees)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationInfo provides a mock function with given fields: userId
func (_m *Client) GetNotificationInfo(userId string) (*model.EmailNotificationInfo, error) {
	ret := _m.Called(userId)

	var r0 *model.EmailNotificationInfo
	if rf, ok := ret.Get(0).(func(string) *model.EmailNotificationInfo); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EmailNotificationInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayoutAccount provides a mock function with given fields: ownerId
func (_m *Client) GetPayoutAccount(ownerId string) (*model.PayoutAccount, error) {
	ret := _m.Called(ownerId)

	var r0 *model.PayoutAccount
	if rf, ok := ret.Get(0).(func(string) *model.PayoutAccount); ok {
		r0 = rf(ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PayoutAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSSOSecret provides a mock function with given fields: orgIDorSlug
func (_m *Client) GetSSOSecret(orgIDorSlug string) (*string, error) {
	ret := _m.Called(orgIDorSlug)

	var r0 *string
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(orgIDorSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgIDorSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByApiKey provides a mock function with given fields: apiKey, apiSecret
func (_m *Client) GetUserByApiKey(apiKey string, apiSecret string) (*model.User, error) {
	ret := _m.Called(apiKey, apiSecret)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, string) *model.User); ok {
		r0 = rf(apiKey, apiSecret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(apiKey, apiSecret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Info provides a mock function with given fields: ids
func (_m *Client) Info(ids []string) (map[string]*model.Info, error) {
	ret := _m.Called(ids)

	var r0 map[string]*model.Info
	if rf, ok := ret.Get(0).(func([]string) map[string]*model.Info); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Info)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserOrgAdmin provides a mock function with given fields: userID, orgID
func (_m *Client) IsUserOrgAdmin(userID string, orgID string) (bool, error) {
	ret := _m.Called(userID, orgID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userID, orgID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserOrgMember provides a mock function with given fields: userID, orgID
func (_m *Client) IsUserOrgMember(userID string, orgID string) (bool, error) {
	ret := _m.Called(userID, orgID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userID, orgID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, site, language
func (_m *Client) Login(email string, site string, language string) (*client.LoginResponse, error) {
	ret := _m.Called(email, site, language)

	var r0 *client.LoginResponse
	if rf, ok := ret.Get(0).(func(string, string, string) *client.LoginResponse); ok {
		r0 = rf(email, site, language)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, site, language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgsForUser provides a mock function with given fields: id
func (_m *Client) OrgsForUser(id string) (map[string]bool, error) {
	ret := _m.Called(id)

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func(string) map[string]bool); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
