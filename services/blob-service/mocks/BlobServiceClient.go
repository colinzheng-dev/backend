// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import blob_service "github.com/veganbase/backend/services/blob-service/proto"
import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"

// BlobServiceClient is an autogenerated mock type for the BlobServiceClient type
type BlobServiceClient struct {
	mock.Mock
}

// AddBlobToItem provides a mock function with given fields: ctx, in, opts
func (_m *BlobServiceClient) AddBlobToItem(ctx context.Context, in *blob_service.BlobItemAssocRequest, opts ...grpc.CallOption) (*blob_service.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blob_service.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *blob_service.BlobItemAssocRequest, ...grpc.CallOption) *blob_service.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob_service.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *blob_service.BlobItemAssocRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBlob provides a mock function with given fields: ctx, in, opts
func (_m *BlobServiceClient) CreateBlob(ctx context.Context, in *blob_service.CreateBlobRequest, opts ...grpc.CallOption) (*blob_service.BlobInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blob_service.BlobInfo
	if rf, ok := ret.Get(0).(func(context.Context, *blob_service.CreateBlobRequest, ...grpc.CallOption) *blob_service.BlobInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob_service.BlobInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *blob_service.CreateBlobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBlob provides a mock function with given fields: ctx, in, opts
func (_m *BlobServiceClient) DeleteBlob(ctx context.Context, in *blob_service.SingleBlobRequest, opts ...grpc.CallOption) (*blob_service.BlobInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blob_service.BlobInfo
	if rf, ok := ret.Get(0).(func(context.Context, *blob_service.SingleBlobRequest, ...grpc.CallOption) *blob_service.BlobInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob_service.BlobInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *blob_service.SingleBlobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagList provides a mock function with given fields: ctx, in, opts
func (_m *BlobServiceClient) GetTagList(ctx context.Context, in *blob_service.GetTagListRequest, opts ...grpc.CallOption) (*blob_service.TagList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blob_service.TagList
	if rf, ok := ret.Get(0).(func(context.Context, *blob_service.GetTagListRequest, ...grpc.CallOption) *blob_service.TagList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob_service.TagList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *blob_service.GetTagListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveBlobFromItem provides a mock function with given fields: ctx, in, opts
func (_m *BlobServiceClient) RemoveBlobFromItem(ctx context.Context, in *blob_service.BlobItemAssocRequest, opts ...grpc.CallOption) (*blob_service.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blob_service.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *blob_service.BlobItemAssocRequest, ...grpc.CallOption) *blob_service.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob_service.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *blob_service.BlobItemAssocRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItemBlobs provides a mock function with given fields: ctx, in, opts
func (_m *BlobServiceClient) RemoveItemBlobs(ctx context.Context, in *blob_service.RemoveItemBlobsRequest, opts ...grpc.CallOption) (*blob_service.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blob_service.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *blob_service.RemoveItemBlobsRequest, ...grpc.CallOption) *blob_service.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob_service.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *blob_service.RemoveItemBlobsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveBlob provides a mock function with given fields: ctx, in, opts
func (_m *BlobServiceClient) RetrieveBlob(ctx context.Context, in *blob_service.SingleBlobRequest, opts ...grpc.CallOption) (*blob_service.BlobInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blob_service.BlobInfo
	if rf, ok := ret.Get(0).(func(context.Context, *blob_service.SingleBlobRequest, ...grpc.CallOption) *blob_service.BlobInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob_service.BlobInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *blob_service.SingleBlobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveBlobs provides a mock function with given fields: ctx, in, opts
func (_m *BlobServiceClient) RetrieveBlobs(ctx context.Context, in *blob_service.RetrieveBlobsRequest, opts ...grpc.CallOption) (*blob_service.BlobsInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blob_service.BlobsInfo
	if rf, ok := ret.Get(0).(func(context.Context, *blob_service.RetrieveBlobsRequest, ...grpc.CallOption) *blob_service.BlobsInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob_service.BlobsInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *blob_service.RetrieveBlobsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlob provides a mock function with given fields: ctx, in, opts
func (_m *BlobServiceClient) UpdateBlob(ctx context.Context, in *blob_service.UpdateBlobRequest, opts ...grpc.CallOption) (*blob_service.BlobInfo, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *blob_service.BlobInfo
	if rf, ok := ret.Get(0).(func(context.Context, *blob_service.UpdateBlobRequest, ...grpc.CallOption) *blob_service.BlobInfo); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob_service.BlobInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *blob_service.UpdateBlobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
