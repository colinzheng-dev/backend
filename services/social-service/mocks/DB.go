// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/veganbase/backend/services/social-service/db"

	model "github.com/veganbase/backend/services/social-service/model"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// AvgReviewRank provides a mock function with given fields: subject
func (_m *DB) AvgReviewRank(subject string) (*float64, error) {
	ret := _m.Called(subject)

	var r0 *float64
	if rf, ok := ret.Get(0).(func(string) *float64); ok {
		r0 = rf(subject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*float64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePost provides a mock function with given fields: post
func (_m *DB) CreatePost(post *model.Post) error {
	ret := _m.Called(post)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Post) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReply provides a mock function with given fields: reply
func (_m *DB) CreateReply(reply *model.Reply) error {
	ret := _m.Called(reply)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Reply) error); ok {
		r0 = rf(reply)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUpvote provides a mock function with given fields: upvote
func (_m *DB) CreateUpvote(upvote *model.Upvote) error {
	ret := _m.Called(upvote)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Upvote) error); ok {
		r0 = rf(upvote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserSubscription provides a mock function with given fields: userID, subscriptionID
func (_m *DB) CreateUserSubscription(userID string, subscriptionID string) error {
	ret := _m.Called(userID, subscriptionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, subscriptionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePost provides a mock function with given fields: postId
func (_m *DB) DeletePost(postId string) error {
	ret := _m.Called(postId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(postId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReply provides a mock function with given fields: replyId
func (_m *DB) DeleteReply(replyId string) error {
	ret := _m.Called(replyId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(replyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUpvote provides a mock function with given fields: upvoteId
func (_m *DB) DeleteUpvote(upvoteId string) error {
	ret := _m.Called(upvoteId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(upvoteId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserSubscription provides a mock function with given fields: userID, subscriptionID
func (_m *DB) DeleteUserSubscription(userID string, subscriptionID string) error {
	ret := _m.Called(userID, subscriptionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, subscriptionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPosts provides a mock function with given fields: params
func (_m *DB) GetPosts(params *db.DatabaseParams) (*[]model.Post, *uint, error) {
	ret := _m.Called(params)

	var r0 *[]model.Post
	if rf, ok := ret.Get(0).(func(*db.DatabaseParams) *[]model.Post); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Post)
		}
	}

	var r1 *uint
	if rf, ok := ret.Get(1).(func(*db.DatabaseParams) *uint); ok {
		r1 = rf(params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*uint)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*db.DatabaseParams) error); ok {
		r2 = rf(params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListFollowers provides a mock function with given fields: targetID
func (_m *DB) ListFollowers(targetID string) ([]string, error) {
	ret := _m.Called(targetID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(targetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(targetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserSubscriptions provides a mock function with given fields: userID
func (_m *DB) ListUserSubscriptions(userID string) ([]string, error) {
	ret := _m.Called(userID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserUpvotes provides a mock function with given fields: userID
func (_m *DB) ListUserUpvotes(userID string) (*[]string, error) {
	ret := _m.Called(userID)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(string) *[]string); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWhoUpvoted provides a mock function with given fields: itemId
func (_m *DB) ListWhoUpvoted(itemId string) ([]string, error) {
	ret := _m.Called(itemId)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(itemId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostById provides a mock function with given fields: postId
func (_m *DB) PostById(postId string) (*model.Post, error) {
	ret := _m.Called(postId)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(string) *model.Post); ok {
		r0 = rf(postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepliesByParentId provides a mock function with given fields: parentId
func (_m *DB) RepliesByParentId(parentId string) (*[]model.Reply, error) {
	ret := _m.Called(parentId)

	var r0 *[]model.Reply
	if rf, ok := ret.Get(0).(func(string) *[]model.Reply); ok {
		r0 = rf(parentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Reply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(parentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplyById provides a mock function with given fields: replyId
func (_m *DB) ReplyById(replyId string) (*model.Reply, error) {
	ret := _m.Called(replyId)

	var r0 *model.Reply
	if rf, ok := ret.Get(0).(func(string) *model.Reply); ok {
		r0 = rf(replyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Reply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(replyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveEvent provides a mock function with given fields: topic, eventData, inTx
func (_m *DB) SaveEvent(topic string, eventData interface{}, inTx func() error) error {
	ret := _m.Called(topic, eventData, inTx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, func() error) error); ok {
		r0 = rf(topic, eventData, inTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePost provides a mock function with given fields: post
func (_m *DB) UpdatePost(post *model.Post) error {
	ret := _m.Called(post)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Post) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReply provides a mock function with given fields: reply
func (_m *DB) UpdateReply(reply *model.Reply) error {
	ret := _m.Called(reply)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Reply) error); ok {
		r0 = rf(reply)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpvoteByUserAndItemId provides a mock function with given fields: userId, itemId
func (_m *DB) UpvoteByUserAndItemId(userId string, itemId string) (*model.Upvote, error) {
	ret := _m.Called(userId, itemId)

	var r0 *model.Upvote
	if rf, ok := ret.Get(0).(func(string, string) *model.Upvote); ok {
		r0 = rf(userId, itemId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Upvote)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpvoteQuantityByItemId provides a mock function with given fields: ids
func (_m *DB) UpvoteQuantityByItemId(ids []string) (*[]model.UpvoteQuantityInfo, error) {
	ret := _m.Called(ids)

	var r0 *[]model.UpvoteQuantityInfo
	if rf, ok := ret.Get(0).(func([]string) *[]model.UpvoteQuantityInfo); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.UpvoteQuantityInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
